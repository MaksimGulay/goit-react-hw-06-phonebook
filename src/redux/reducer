import { combineReducers } from 'redux';

const contactInitialState = {
  contacts: [
    { id: 1, name: 'Іван', phone: '123456789' },
    { id: 2, name: 'Марія', phone: '987654321' },
    { id: 3, name: 'Петро', phone: '555555555' },
  ],
};

const contactsReducers = (state = contactInitialState, action) => {
  switch (action.type) {
    case 'contacts/AddNewContact':
      const existingContact = state.contacts.find(
        contact =>
          contact.name.toLowerCase() === action.payload.name.toLowerCase()
      );
      if (existingContact) {
        alert(`"${existingContact.name}" is already in contacts.`);
        return state;
      } else {
        return {
          ...state,
          contacts: [...state.contacts, action.payload],
        };
      }
    case 'contacts/deleteContact':
      return {
        ...state,
        contacts: state.contacts.filter(
          contact => contact.id !== action.payload.id
        ),
      };
    default:
      return state;
  }
};

const filterInitialState = {
  filter: '',
};

const filterReducer = (state = filterInitialState, action) => {
  switch (action.type) {
    case 'filter/setFilter':
      return {
        ...state,
        filter: action.payload,
      };
    default:
      return state;
  }
};

export const rootReducer = combineReducers({
  contacts: contactsReducers,
  filter: filterReducer,
});

// export const rootReducer = (state = {}, action) => {
//   return {
//     contacts: contactsReducers(state.contacts, action),
//     filter: filterReducer(state.filter, action),
//   };
// };

// const rootReducer = (state = initialState, action) => {
//   switch (action.type) {
//     case 'contacts/AddNewContact':
//       const existingContact = state.contacts.find(
//         contact =>
//           contact.name.toLowerCase() === action.payload.name.toLowerCase()
//       );
//       if (existingContact) {
//         alert(`"${existingContact.name}" is already in contacts.`);
//         return state;
//       } else {
//         return {
//           ...state,
//           contacts: [...state.contacts, action.payload],
//         };
//       }
//     case 'contacts/deleteContact':
//       return {
//         ...state,
//         contacts: state.contacts.filter(
//           contact => contact.id !== action.payload.id
//         ),
//       };
//     case 'filter/setFilter':
//       return {
//         ...state,
//         filter: action.payload,
//       };
//     default:
//       return state;
//   }
// };

// export default rootReducer;

// const initialState = {
//   contacts: [
//     { id: 1, name: 'Іван', phone: '123456789' },
//     { id: 2, name: 'Марія', phone: '987654321' },
//     { id: 3, name: 'Петро', phone: '555555555' },
//   ],
//   filter: '',
// };

// const rootReducer = (state = initialState, action) => {
//   switch (action.type) {
//     case 'contacts/AddNewContact':
//       const existingContact = state.find(
//         contact =>
//           contact.name.toLowerCase() === action.payload.name.toLowerCase()
//       );
//       if (existingContact) {
//         alert(`"${existingContact.name}" is already in contacts.`);
//         return state;
//       } else {
//         return [...state, action.payload];
//       }
//     case 'contacts/deleteContact':
//       return state.filter(contact => contact.id !== action.payload.id);

//     case 'filter/setFilter':
//       return { ...state, filter: action.payload };

//     default:
//       return state;
//   }
// };

// export default rootReducer;
